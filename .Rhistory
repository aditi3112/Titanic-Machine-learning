q()
utils:::menuInstallPkgs()
utils:::menuInstallPkgs()
install.package("twitterR")
install("twitterR")
install.package("RCurl")
utils:::menuInstallPkgs()
require(twitterR)
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
consumer_key <- 'uzErZq7g4kdQLK2LvCdOCtyJA'
consumer_secret <- 'tblISIaOrVRCpwsB9E9YU8GjgNSS04IlPBwmgS2bX695MBhqzs'
access_token <- '157288973-0pO2zWzMrG0BNqo4yslk6p1xn8yOzVlqHukxmaVK'
access_secret <- '8faKzVg2oEUtE0Ydc1YebQGVvzMD79g5szLnZs8pXPtUn'
setup_twitter_oauth(consumer_key,consumer_secret,access_token,access_secret)
2
LFC_tweets <- searchTwitter("LFC",n=10,lang="en")
LFC_tweets
LFC_tweets[1:3]
install.packages("tm")
install.packages("wordcloud")
require(wordcloud)
require(tm)
himearth <- searchTwitter('eathquake+himalaya',lang="en",n=50,resultType="recent")
class(himearth}
class(himearth)
himearth_text <- sapply(himearth, function(x) x$getText())
str(himearth_text)
himearth_text <- sapply(himearth, function(x)x$getText())
str(himearth_text)
him_corpus <- Corpus(VectorSource(himearth_text))
him_corpus
inspect(him_corpus)
q()
swirl
swirl()
library(swirl)
swirl()
5+7
x<-5+7
x
y<-x-3
y
c(1.1,9,3.14)
z<-c(1.1,9,3.14)
?c
z
q()
read.csv("aditi")
read.csv("aditi.csv")
str("aditi.csv")
dim()
dim("aditi.csv")
length(aditi.tc)
data(aditi)
data("aditi")
data("aditi.csv")
data(aditi.csv)
data()
hist()
hist(aditi)
hist(aditi$tc)
hist(aditi.csv$TC)
q()
rattle()
library("rattle")
rattle()
q()
install.packages("twitteR")
install.packages("twitteR")
install.packages("twitteR")
install.packages("twitteR")
install.packages("twitteR")
install.packages("twitteR")
library(twitterR)
install.packages("twitteR")
install.packages(c("amap", "backports", "BH", "biclust", "bit", "broom", "car", "caret", "checkmate", "crayon", "curl", "d3heatmap", "data.table", "DBI", "ddalpha", "digest", "dplyr", "DRR", "fields", "Formula", "GA", "ggthemes", "heatmaply", "Hmisc", "hms", "htmlTable", "htmlwidgets", "httpuv", "httr", "installr", "jsonlite", "kernlab", "knitr", "lava", "lazyeval", "lme4", "lubridate", "maps", "miniUI", "NLP", "openssl", "prodlim", "psych", "quantreg", "R6", "randomForest", "Rcpp", "RcppEigen", "RCurl", "recipes", "reshape2", "RGtk2", "rJava", "rjson", "rlang", "robustbase", "rpart.plot", "scagnostics", "scales", "seriation", "sfsmisc", "shiny", "slam", "sourcetools", "spam", "stringi", "stringr", "testthat", "tibble", "tidyr", "tidyselect", "timeDate", "tm", "viridis", "viridisLite", "withr", "XML", "yaml"))
install.packages(c("amap", "backports", "BH", "biclust", "bit", "broom", "car", "caret", "checkmate", "crayon", "curl", "d3heatmap", "data.table", "DBI", "ddalpha", "digest", "dplyr", "DRR", "fields", "Formula", "GA", "ggthemes", "heatmaply", "Hmisc", "hms", "htmlTable", "htmlwidgets", "httpuv", "httr", "installr", "jsonlite", "kernlab", "knitr", "lava", "lazyeval", "lme4", "lubridate", "maps", "miniUI", "NLP", "openssl", "prodlim", "psych", "quantreg", "R6", "randomForest", "Rcpp", "RcppEigen", "RCurl", "recipes", "reshape2", "RGtk2", "rJava", "rjson", "rlang", "robustbase", "rpart.plot", "scagnostics", "scales", "seriation", "sfsmisc", "shiny", "slam", "sourcetools", "spam", "stringi", "stringr", "testthat", "tibble", "tidyr", "tidyselect", "timeDate", "tm", "viridis", "viridisLite", "withr", "XML", "yaml"))
install.packages(c("amap", "backports"))
install.packages(c("BH", "biclust", "bit", "broom", "car", "caret", "checkmate", "crayon", "curl", "d3heatmap"))
install.packages(c("BH", "biclust", "bit", "broom", "car", "caret", "checkmate", "crayon", "curl", "d3heatmap"))
install.packages(c("BH", "biclust", "bit", "broom", "car", "caret", "checkmate", "crayon", "curl", "d3heatmap"))
library(twitterR)
setup_twitter_oauth(api_key.api_secret,access_token,access_token_secret)
library(twitterR)
install.packages("twitteR")
library(twitterR)
setwd("~/Kaggle/DATA/Titanic")
titanic.train<-read.csv(file = "train.csv" , stringsAsFactors = FALSE , header = TRUE)
titanic.test<-read.csv(file = "test.csv" , stringsAsFactors = FALSE , header = TRUE)
titanic.train$IsTrain<- TRUE
titanic.test$IsTrain<- FALSE
titanic.test$Survived<-NA
titanic.full<-rbind(titanic.test,titanic.train)
titanic.full[titanic.full$Embarked=='', "Embarked"]<-'S'
titanic.full$Pclass<-as.factor(titanic.full$Parch)
titanic.full$Sex<-as.factor(titanic.full$Sex)
titanic.full$Embarked<-as.factor(titanic.full$Embarked)
age.median<-median(titanic.full$Age , na.rm = TRUE)
titanic.full[is.na(titanic.full$Age),"Age"]<-age.median
boxplot(titanic.full$Fare)
boxplot.stats(titanic.full$Fare)
titanic.full$Fare <= 65
boxplot.stats(titanic.full$Fare)$stats[5]
upper.whisker <-boxplot.stats(titanic.full$Fare)$stats[5]
upper.whisker
titanic.full$Fare < upper.whisker
outlier.filter <-titanic.full$Fare < upper.whisker
titanic.full[outlier.filter,]
fare.equation = "Fare ~ Pclass + Sex + Age + SibSp + Parch + Embarked"
fare.model<-lm(
formula = fare.equation,
data = titanic.full[outlier.filter,]
)
fare.row<-titanic.full[
is.na(titanic.full$Fare),
c("Pclass" , "Sex" , "Age" , "SibSp" , "Parch" , "Embarked")
]
fare.predictions<-predict(fare.model , newdata = fare.row)
5titanic.full[is.na(titanic.full$Fare), "Fare"] <- fare.predictions
titanic.full[is.na(titanic.full$Fare), "Fare"] <- fare.predictions
fare.predictions<-predict(fare.model , newdata = fare.row)
titanic.full[1044]
titanic.full[1044 ,]
titanic.train<-titanic.full[titanic.full$IsTrain==TRUE,]
titanic.test<-titanic.full[titanic.full$IsTrain==FALSE,]
Survived.equation<-"Survived ~ Pclass +Sex + Age + SibSp + Parch + Fare + Embarked"
Survived.formula<-as.formula(Survived.equation)
install.packages("randomForest")
titanic.model <- randomForest(formula = Survived.formula , data = titanic.train , ntry = 500 , mtry = 3 ,nodesize = 0.01 * nrow(titanic.test))
features.equation <- "Pclass +Sex + Age + SibSp + Parch + Fare + Embarked"
Survived <-predict(titanic.model , newdata = titanic.test)
PassengerId<-titanic.test$PassengerId
output.df<-as.data.frame(PassengerId)
output.df$Survived<- Survived
Survived <-predict(titanic.model , newdata = titanic.test)
titanic.model <- randomForest(formula = Survived.formula , data = titanic.train , ntry = 500 , mtry = 3 ,nodesize = 0.01 * nrow(titanic.test))
Survived.equation<-"Survived ~ Pclass +Sex + Age + SibSp + Parch + Fare + Embarked"
Survived.formula<-as.formula(Survived.equation)
install.packages("randomForest")
install.packages("randomForest")
